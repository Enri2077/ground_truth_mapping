base_local_planner: dwa_local_planner/DWAPlannerROS
#base_global_planner: global_planner/GlobalPlanner  # The name of the plugin for the local planner to use with move_base see pluginlib documentation for more details on plugins. This plugin must adhere to the nav_core::BaseLocalPlanner interface specified in the nav_core package.

shutdown_costmaps: false
controller_frequency: 10.0
planner_patience: 5.0
controller_patience: 15.0
conservative_reset_dist: 3.0
planner_frequency: 0.5
oscillation_timeout: 10.0
oscillation_distance: 0.2

local_costmap:
  obstacle_range: 3.0
  raytrace_range: 3.5

  robot_radius: 0.22

  inflation_radius: 1.0
  cost_scaling_factor: 5.0

  observation_sources: scan_gt
  scan_gt: {sensor_frame: base_scan_gt, data_type: LaserScan, topic: scan_gt, marking: true, clearing: true}

  global_frame: map
  robot_base_frame: base_link

  update_frequency: 2.0
  publish_frequency: 2.0
  transform_tolerance: 0.5

  rolling_window: true
  width: 6
  height: 6
  resolution: 0.05

  plugins:  # Sequence of plugin specifications, one per layer. Each specification is a dictionary with name and type fields.
    - {name: static_layer, type: "costmap_2d::StaticLayer"}
#    - {name: obstacle_layer, type: "costmap_2d::ObstacleLayer"}
    - {name: inflation_layer, type: "costmap_2d::InflationLayer"}

  static_layer:  # http://wiki.ros.org/costmap_2d/hydro/staticmap#Parameters
    enabled: true
    map_topic: /map_gt
    subscribe_to_updates: true  # default: false  TODO # In addition to map_topic, also subscribe to map_topic + "_updates"
    track_unknown_space: false  # default: true  # If true, unknown values in the map messages are translated directly to the layer. Otherwise, unknown values in the map message are translated as FREE_SPACE in the layer.
    unknown_cost_value: -1  # default: -1  # The value for which a cost should be considered unknown when reading in a map from the map server. If the costmap is not tracking unknown space, costs of this value will be considered occupied. A value of zero also results in this parameter being unused.

  obstacle_layer:  # http://wiki.ros.org/costmap_2d/hydro/obstacles#Global_Filtering_Parameters
    enabled: true
    max_obstacle_height: 0.6  # The maximum height of any obstacle to be inserted into the costmap in meters. This parameter should be set to be slightly higher than the height of your robot.
    obstacle_range: 30.0  # default: 2.5  # The default maximum distance from the robot at which an obstacle will be inserted into the cost map in meters. This can be over-ridden on a per-sensor basis.
    raytrace_range: 30.0  # default: 3.0  # The default range in meters at which to raytrace out obstacles from the map using sensor data. This can be over-ridden on a per-sensor basis.
    observation_sources: scan_gt  # http://wiki.ros.org/costmap_2d/hydro/obstacles#Sensor_management_parameters
    scan_gt:
      data_type: LaserScan
      topic: /scan_gt
      sensor_frame: base_scan_gt
      expected_update_rate: 0.4  # How often to expect a reading from a sensor in seconds. A value of 0.0 will allow infinite time between readings. This parameter is used as a failsafe to keep the navigation stack from commanding the robot when a sensor has failed. It should be set to a value that is slightly more permissive than the actual rate of the sensor. For example, if we expect a scan from a laser every 0.05 seconds we might set this parameter to be 0.1 seconds to give a generous buffer and account for some amount of system latency.
      clearing: true  # default: false  # Whether or not this observation should be used to clear out freespace.
      marking: true  # default: true  # Whether or not this observation should be used to mark obstacles.

  inflation_layer:  # http://wiki.ros.org/costmap_2d/hydro/inflation#Parameters
    enabled: true
    cost_scaling_factor: 7.5 # default: 10  # A scaling factor to apply to cost values during inflation. The cost function is computed as follows for all cells in the costmap further than the inscribed radius distance and closer than the inflation radius distance away from an actual obstacle: exp(-1.0 * cost_scaling_factor * (distance_from_obstacle - inscribed_radius)) * (costmap_2d::INSCRIBED_INFLATED_OBSTACLE - 1), where costmap_2d::INSCRIBED_INFLATED_OBSTACLE is currently 254. NOTE: since the cost_scaling_factor is multiplied by a negative in the formula, increasing the factor will decrease the resulting cost values.
    inflation_radius: 0.3 # default: 0.55  # The radius in meters to which the map inflates obstacle cost values.


DWAPlannerROS:

# Robot Configuration Parameters
  max_vel_x: 4.0
  min_vel_x: -4.0

  max_vel_y: 0.0
  min_vel_y: 0.0

  max_vel_theta: 3.14
  min_vel_theta: 0.0

  max_vel_trans:  4.0
  min_vel_trans:  0.0

  trans_stopped_vel: 0.01
  theta_stopped_vel: 0.2

  acc_lim_x: 10.0
  acc_lim_y: 0.0
  acc_lim_theta: 10.0
  acc_lim_trans: 10.0

# Goal Tolerance Parameters
  xy_goal_tolerance: 0.2
  yaw_goal_tolerance: 0.1
  latch_xy_goal_tolerance: true

# Forward Simulation Parameters
  sim_time: 2.0
  sim_granularity: 0.01
  angular_sim_granularity: 0.1
  vx_samples: 20
  vy_samples: 0
  vth_samples: 40
  controller_frequency: 10.0

# Trajectory Scoring Parameters
  path_distance_bias: 32.0
  goal_distance_bias: 20.0
  occdist_scale: 0.01
  forward_point_distance: 0.325
  stop_time_buffer: 0.2
  scaling_speed: 0.25
  max_scaling_factor: 0.2

# Oscillation Prevention Parameters
  oscillation_reset_dist: 0.05

# Debugging
  publish_traj_pc : true
  publish_cost_grid_pc: true

global_costmap:
  obstacle_range: 3.0
  raytrace_range: 3.5

  robot_radius: 0.24

  inflation_radius: 1.0
  cost_scaling_factor: 3.0

  global_frame: map
  robot_base_frame: base_link

  update_frequency: 1.0
  publish_frequency: 0.1
  transform_tolerance: 0.5

#  rolling_window: true
  width: 200
  height: 200
  resolution: 0.1

#  static_map: true
  plugins:  # Sequence of plugin specifications, one per layer. Each specification is a dictionary with name and type fields.
    - {name: static_layer, type: "costmap_2d::StaticLayer"}
##    - {name: obstacle_layer, type: "costmap_2d::ObstacleLayer"}
    - {name: inflation_layer, type: "costmap_2d::InflationLayer"}

  static_layer:  # http://wiki.ros.org/costmap_2d/hydro/staticmap#Parameters
    enabled: true
    map_topic: /map_gt
    subscribe_to_updates: true  # default: false  # In addition to map_topic, also subscribe to map_topic + "_updates"
    track_unknown_space: false  # default: true  # If true, unknown values in the map messages are translated directly to the layer. Otherwise, unknown values in the map message are translated as FREE_SPACE in the layer.
    unknown_cost_value: -1  # default: -1  # The value for which a cost should be considered unknown when reading in a map from the map server. If the costmap is not tracking unknown space, costs of this value will be considered occupied. A value of zero also results in this parameter being unused.

  obstacle_layer:  # http://wiki.ros.org/costmap_2d/hydro/obstacles#Global_Filtering_Parameters
    enabled: true
    max_obstacle_height: 0.6  # The maximum height of any obstacle to be inserted into the costmap in meters. This parameter should be set to be slightly higher than the height of your robot.
    obstacle_range: 30.0  # default: 2.5  # The default maximum distance from the robot at which an obstacle will be inserted into the cost map in meters. This can be over-ridden on a per-sensor basis.
    raytrace_range: 30.0  # default: 3.0  # The default range in meters at which to raytrace out obstacles from the map using sensor data. This can be over-ridden on a per-sensor basis.
    observation_sources: scan_gt  # http://wiki.ros.org/costmap_2d/hydro/obstacles#Sensor_management_parameters
    scan_gt:
      data_type: LaserScan
      topic: /scan_gt
      sensor_frame: base_scan_gt
      expected_update_rate: 0.4  # How often to expect a reading from a sensor in seconds. A value of 0.0 will allow infinite time between readings. This parameter is used as a failsafe to keep the navigation stack from commanding the robot when a sensor has failed. It should be set to a value that is slightly more permissive than the actual rate of the sensor. For example, if we expect a scan from a laser every 0.05 seconds we might set this parameter to be 0.1 seconds to give a generous buffer and account for some amount of system latency.
      clearing: true  # default: false  # Whether or not this observation should be used to clear out freespace.
      marking: true  # default: true  # Whether or not this observation should be used to mark obstacles.

  inflation_layer:  # http://wiki.ros.org/costmap_2d/hydro/inflation#Parameters
    enabled: true
    cost_scaling_factor: 7.5 # default: 10  # A scaling factor to apply to cost values during inflation. The cost function is computed as follows for all cells in the costmap further than the inscribed radius distance and closer than the inflation radius distance away from an actual obstacle: exp(-1.0 * cost_scaling_factor * (distance_from_obstacle - inscribed_radius)) * (costmap_2d::INSCRIBED_INFLATED_OBSTACLE - 1), where costmap_2d::INSCRIBED_INFLATED_OBSTACLE is currently 254. NOTE: since the cost_scaling_factor is multiplied by a negative in the formula, increasing the factor will decrease the resulting cost values.
    inflation_radius: 0.3 # default: 0.55  # The radius in meters to which the map inflates obstacle cost values.

### global planner configuration
## http://wiki.ros.org/global_planner#Parameters
#GlobalPlanner:
#  allow_unknown: true  # default: true  # Specifies whether or not to allow the planner to create plans that traverse unknown space. NOTE: if you are using a layered costmap_2d costmap with a voxel or obstacle layer, you must also set the track_unknown_space param for that layer to be true, or it will convert all your unknown space to free space (which planner will then happily go right through).
#  default_tolerance: 0.0  # default: 0.0  # A tolerance on the goal point for the planner. The planner will attempt to create a plan that is as close to the specified goal as possible but no further than default_tolerance away.
#  use_dijkstra: true   # default: true  # If true, use dijkstra's algorithm. Otherwise, A*.
#  use_quadratic: true  # default: true  # If true, use the quadratic approximation of the potential. Otherwise, use a simpler calculation.
#  use_grid_path: false  # default: false  # If true, create a path that follows the grid boundaries. Otherwise, use a gradient descent method.
#  old_navfn_behavior: false  # default: false  # If for some reason, you want global_planner to exactly mirror the behavior of navfn, set this to true (and use the defaults for the other boolean parameters)
#  lethal_cost: 253  # default: 253  # Lethal Cost (dynamic reconfigure)
#  neutral_cost: 50  # default: 50  # Neutral Cost (dynamic reconfigure)
#  cost_factor: 3.0  # default: 3.  # Factor to multiply each cost from costmap by (dynamic reconfigure)
#  publish_potential: true  # default: true  # Publish Potential Costmap (dynamic reconfigure)
#  orientation_mode: 0  # default: 0  # How to set the orientation of each point (None=0, Forward=1, Interpolate=2, ForwardThenInterpolate=3, Backward=4, Leftward=5, Rightward=6) (dynamic reconfigure)
#  orientation_window_size: 1  # default: 1  # What window to use to determine the orientation based on the position derivative specified by the orientation mode (dynamic reconfigure)
